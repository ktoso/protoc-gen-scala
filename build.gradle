apply plugin: 'java' // for zip
apply plugin: 'scala'

project.group = 'pl.project13'
archivesBasename = 'protoc-gen-scala'
project.version = "1.0.0"

repositories {
    mavenCentral()
    mavenRepo urls: 'http://scala-tools.org/repo-releases/'
    mavenRepo urls: ['http://repository.jboss.org/maven2/']
}

manifest.mainAttributes("Main-Class": "pl.project13.protoscala.MainRunner",
        "Class-Path": 'lib/'
                + 'lib/guava-r08.jar'
                + 'lib/protobuf-java-2.4.0a.jar'
)

dependencies {
    // Libraries needed to run the scala tools
    scalaTools 'org.scala-lang:scala-compiler:2.8.0'
    scalaTools 'org.scala-lang:scala-library:2.8.0'

    // yes, really declare it a second time (or you'll get 'object scala not found')
    compile 'org.scala-lang:scala-compiler:2.8.0'
    compile 'org.scala-lang:scala-library:2.8.0'

    // Libraries needed for scala api
    compile files(
            'lib/guava-r08.jar',
            'lib/protobuf-java-2.4.0a.jar',
            'lib/scalatest-1.3.jar',
            'lib/scalatest-1.3-tests.jar'
    )

    // for tests
    testCompile 'org.easytesting:fest-assert:1.4'
    testCompile 'junit:junit:4.8.2'
}

clean << {
    ant {
        ['out', 'dist'].each {
            println "rm $it"
            delete(it)
        }
    }
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task dist(dependsOn: [jar]) << {
    copy /* main app */ {
        from 'build/libs'
        into 'dist'
        include '**/*.jar'
    }
    copy /* dependencies */ {
        from 'lib'
        into 'dist/lib'
        include '**/*.jar'
    }

    copy /* launcher */ {
        from 'src/main/resources'
        into 'dist'
        include '**/*'
    }
}

//task run(dependsOn: [dist]) << {
//    ['bash', './dist/'].execute()
//}